/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  carrierDeactivateRequestSchema,
  deviceManagementResultSchema,
  type DeviceManagementResult,
  type CarrierDeactivateRequest,
} from 'sdksio-verizon-apis-sdk';
import { schemas } from '../../schema.js';
import { deviceManagementController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface DeactivateServiceForDevicesMCPToolRequest {
  'body': CarrierDeactivateRequest,
}

const deactivateServiceForDevicesMCPToolRequestSchema = object({
  body: ['body', lazy(() => carrierDeactivateRequestSchema)],
});

async function handleDeactivateServiceForDevices(
  args: unknown | DeactivateServiceForDevicesMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, deactivateServiceForDevicesMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await deviceManagementController.deactivateServiceForDevices(
      mappingResult.result['body']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function deviceManagementDeactivateServiceForDevicesTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "deviceManagement-deactivateServiceForDevices",
      description: `Deactivating service for a device may result in an early termination fee (ETF) being charged to the account, depending on the terms of the contract with Verizon. If your contract allows ETF waivers an... (truncated)`,
      inputSchema: await schemas.loadSchema("Device Management", "DeactivateServiceForDevices"),
    },
    handler: handleDeactivateServiceForDevices,
  };
}

