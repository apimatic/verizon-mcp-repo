/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { servicePlanSchema, type ServicePlan } from 'sdksio-verizon-apis-sdk';
import { schemas } from '../../schema.js';
import { servicePlansController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface ListAccountServicePlansMCPToolRequest {
  'aname': string,
}

const listAccountServicePlansMCPToolRequestSchema = object({
  aname: ['aname', string()],
});

async function handleListAccountServicePlans(
  args: unknown | ListAccountServicePlansMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, listAccountServicePlansMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await servicePlansController.listAccountServicePlans(
      mappingResult.result['aname']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function servicePlansListAccountServicePlansTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "servicePlans-listAccountServicePlans",
      description: `Returns a list of all data service plans that are associated with a specified billing account. When you send a request to /devices/actions/activate to activate a line of service you must specify the c... (truncated)`,
      inputSchema: await schemas.loadSchema("Service Plans", "ListAccountServicePlans"),
    },
    handler: handleListAccountServicePlans,
  };
}

