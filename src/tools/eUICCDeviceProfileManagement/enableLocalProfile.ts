/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  profileChangeStateRequestSchema,
  requestResponseSchema,
  type RequestResponse,
  type ProfileChangeStateRequest,
} from 'thingspace-connectivity-management-apilib';
import { schemas } from '../../schema.js';
import { eUICCDeviceProfileManagementController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface EnableLocalProfileMCPToolRequest {
  'body': ProfileChangeStateRequest,
}

const enableLocalProfileMCPToolRequestSchema = object({
  body: ['body', lazy(() => profileChangeStateRequestSchema)],
});

async function handleEnableLocalProfile(
  args: unknown | EnableLocalProfileMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, enableLocalProfileMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await eUICCDeviceProfileManagementController.enableLocalProfile(
      mappingResult.result['body']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function eUICCDeviceProfileManagementEnableLocalProfileTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "eUICCDeviceProfileManagement-enableLocalProfile",
      description: `Enable a local profile that has been downloaded to eUICC devices.`,
      inputSchema: await schemas.loadSchema("eUICC Device Profile Management", "EnableLocalProfile"),
    },
    handler: handleEnableLocalProfile,
  };
}

