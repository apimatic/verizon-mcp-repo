/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  addDevicesRequestSchema,
  addDevicesResultSchema,
  type AddDevicesResult,
  type AddDevicesRequest,
} from 'thingspace-connectivity-management-apilib';
import { schemas } from '../../schema.js';
import { deviceManagementController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface AddDevicesMCPToolRequest {
  'body': AddDevicesRequest,
}

const addDevicesMCPToolRequestSchema = object({
  body: ['body', lazy(() => addDevicesRequestSchema)],
});

async function handleAddDevices(
  args: unknown | AddDevicesMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, addDevicesMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await deviceManagementController.addDevices(mappingResult.result['body']);
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function deviceManagementAddDevicesTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "deviceManagement-addDevices",
      description: `Use this API if you want to manage some device settings before you are ready to activate service for the devices.`,
      inputSchema: await schemas.loadSchema("Device Management", "AddDevices"),
    },
    handler: handleAddDevices,
  };
}

