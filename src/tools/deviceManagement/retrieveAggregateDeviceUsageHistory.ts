/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  deviceAggregateUsageListRequestSchema,
  deviceManagementResultSchema,
  type DeviceManagementResult,
  type DeviceAggregateUsageListRequest,
} from 'sdksio-verizon-apis-sdk';
import { schemas } from '../../schema.js';
import { deviceManagementController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface RetrieveAggregateDeviceUsageHistoryMCPToolRequest {
  'body': DeviceAggregateUsageListRequest,
}

const retrieveAggregateDeviceUsageHistoryMCPToolRequestSchema = object({
  body: ['body', lazy(() => deviceAggregateUsageListRequestSchema)],
});

async function handleRetrieveAggregateDeviceUsageHistory(
  args: unknown | RetrieveAggregateDeviceUsageHistoryMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, retrieveAggregateDeviceUsageHistoryMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await deviceManagementController.retrieveAggregateDeviceUsageHistory(
      mappingResult.result['body']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function deviceManagementRetrieveAggregateDeviceUsageHistoryTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "deviceManagement-retrieveAggregateDeviceUsageHistory",
      description: `The information is returned in a callback response, so you must register a URL for DeviceUsage callback messages using the POST /callbacks API.`,
      inputSchema: await schemas.loadSchema("Device Management", "RetrieveAggregateDeviceUsageHistory"),
    },
    handler: handleRetrieveAggregateDeviceUsageHistory,
  };
}

