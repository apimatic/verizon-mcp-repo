/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  activateDeviceProfileRequestSchema,
  requestResponseSchema,
  type RequestResponse,
  type ActivateDeviceProfileRequest,
} from 'sdksio-verizon-apis-sdk';
import { schemas } from '../../schema.js';
import { deviceProfileManagementController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface ActivateDeviceThroughProfileMCPToolRequest {
  'body': ActivateDeviceProfileRequest,
}

const activateDeviceThroughProfileMCPToolRequestSchema = object({
  body: ['body', lazy(() => activateDeviceProfileRequestSchema)],
});

async function handleActivateDeviceThroughProfile(
  args: unknown | ActivateDeviceThroughProfileMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, activateDeviceThroughProfileMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await deviceProfileManagementController.activateDeviceThroughProfile(
      mappingResult.result['body']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function deviceProfileManagementActivateDeviceThroughProfileTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "deviceProfileManagement-activateDeviceThroughProfile",
      description: `Uses the profile to bring the device under management.`,
      inputSchema: await schemas.loadSchema("Device Profile Management", "ActivateDeviceThroughProfile"),
    },
    handler: handleActivateDeviceThroughProfile,
  };
}

