/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  bigint,
  object,
  optional,
  string,
  validateAndMap,
} from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  accountLeadsResultSchema,
  type AccountLeadsResult,
} from 'thingspace-connectivity-management-apilib';
import { schemas } from '../../schema.js';
import { accountsController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface ListAccountLeadsMCPToolRequest {
  'aname': string,
  'next': bigint,
}

const listAccountLeadsMCPToolRequestSchema = object({
  aname: ['aname', string()],
  next: ['next', optional(bigint())],
});

async function handleListAccountLeads(
  args: unknown | ListAccountLeadsMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, listAccountLeadsMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await accountsController.listAccountLeads(
      mappingResult.result['aname'],
      mappingResult.result['next']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function accountsListAccountLeadsTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "accounts-listAccountLeads",
      description: `When HTTP status is 202, a URL will be returned in the Location header of the form /leads/{aname}?next={token}. This URL can be used to request the next set of leads.`,
      inputSchema: await schemas.loadSchema("Accounts", "ListAccountLeads"),
    },
    handler: handleListAccountLeads,
  };
}

