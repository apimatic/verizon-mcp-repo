/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  connectivityManagementSuccessResultSchema,
  type ConnectivityManagementSuccessResult,
} from 'sdksio-verizon-apis-sdk';
import { schemas } from '../../schema.js';
import { deviceGroupsController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface DeleteDeviceGroupMCPToolRequest {
  'aname': string,
  'gname': string,
}

const deleteDeviceGroupMCPToolRequestSchema = object({
  aname: ['aname', string()],
  gname: ['gname', string()],
});

async function handleDeleteDeviceGroup(
  args: unknown | DeleteDeviceGroupMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, deleteDeviceGroupMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await deviceGroupsController.deleteDeviceGroup(
      mappingResult.result['aname'],
      mappingResult.result['gname']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function deviceGroupsDeleteDeviceGroupTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "deviceGroups-deleteDeviceGroup",
      description: `Deletes a device group from the account. Devices in the group are moved to the default device group and are not deleted from the account.`,
      inputSchema: await schemas.loadSchema("Device Groups", "DeleteDeviceGroup"),
    },
    handler: handleDeleteDeviceGroup,
  };
}

