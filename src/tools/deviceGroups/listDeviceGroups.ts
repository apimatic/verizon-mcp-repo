/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { object, string, validateAndMap } from '@apimatic/schema';
import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  deviceGroupSchema,
  type DeviceGroup,
} from 'thingspace-connectivity-management-apilib';
import { schemas } from '../../schema.js';
import { deviceGroupsController } from '../../sdk-client.js';
import { createErrorMessage, stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';


interface ListDeviceGroupsMCPToolRequest {
  'aname': string,
}

const listDeviceGroupsMCPToolRequestSchema = object({
  aname: ['aname', string()],
});

async function handleListDeviceGroups(
  args: unknown | ListDeviceGroupsMCPToolRequest
): Promise<CallToolResult> {
  const mappingResult = validateAndMap(args as any, listDeviceGroupsMCPToolRequestSchema);
  if (mappingResult.errors) {
    return {
      content: mappingResult.errors.map(error => ({
        type: "text",
        text: stringifyRawJson(error)
      })),
      isError: true,
    };
  }

  try {
    const response = await deviceGroupsController.listDeviceGroups(mappingResult.result['aname']);
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson({
            statusCode: response.statusCode,
            responseHeaders: response.headers,
            result: response.body
          }),
        },
      ],
    };
  } catch (error) {
    return createErrorMessage(error);
  }
}

export async function deviceGroupsListDeviceGroupsTool(): Promise<ToolDefinition> {
  return {
    tool: {
      name: "deviceGroups-listDeviceGroups",
      description: `Returns a list of all device groups in a specified account.`,
      inputSchema: await schemas.loadSchema("Device Groups", "ListDeviceGroups"),
    },
    handler: handleListDeviceGroups,
  };
}

