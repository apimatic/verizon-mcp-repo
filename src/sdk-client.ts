/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  AccountRequestsController,
  AccountsController,
  Client,
  ConnectivityCallbacksController,
  DeviceDiagnosticsController,
  DeviceGroupsController,
  DeviceManagementController,
  DeviceMonitoringController,
  DeviceProfileManagementController,
  Environment,
  EUICCDeviceProfileManagementController,
  OAuthAuthorizationController,
  ServicePlansController,
  SessionManagementController,
  SMSController,
  type Configuration,
} from 'thingspace-connectivity-management-apilib';

export const sdkClient = new Client(createConfigurationFromEnvironment());

function createConfigurationFromEnvironment(): Partial<Configuration> {
  const config: Partial<Configuration> = {};

  const environment = process.env.THING_SPACE_CONNECTIVITY_MANAGEMENT_API_LIB_ENVIRONMENT;
  const timeout = process.env.THING_SPACE_CONNECTIVITY_MANAGEMENT_API_LIB_TIMEOUT;
  const vZM2MToken2 = process.env.THING_SPACE_CONNECTIVITY_MANAGEMENT_API_LIB_V_ZM_2_M_TOKEN_2;
  const oAuthClientId = process.env.THING_SPACE_CONNECTIVITY_MANAGEMENT_API_LIB_O_AUTH_CLIENT_ID;
  const oAuthClientSecret = process.env.THING_SPACE_CONNECTIVITY_MANAGEMENT_API_LIB_O_AUTH_CLIENT_SECRET;
  const vZM2MToken = process.env.THING_SPACE_CONNECTIVITY_MANAGEMENT_API_LIB_V_ZM_2_M_TOKEN;

  if (environment !== undefined) {
    config.environment = environment as Environment;
  }

  if (timeout !== undefined && timeout !== '') {
    config.timeout = parseInt(timeout);
  }

  if (vZM2MToken2 !== undefined) {
    config.vZM2MToken2 = vZM2MToken2;
  }

  if (oAuthClientId !== undefined && oAuthClientSecret !== undefined) {
    config.thingspaceOauthCredentials = {
      oAuthClientId: oAuthClientId,
      oAuthClientSecret: oAuthClientSecret,
    };
  }

  if (vZM2MToken !== undefined) {
    config.vZM2MTokenCredentials = { 'VZ-M2M-Token': vZM2MToken };
  }

  return config;
}

export const deviceManagementController = new DeviceManagementController(sdkClient);
export const accountsController = new AccountsController(sdkClient);
export const deviceGroupsController = new DeviceGroupsController(sdkClient);
export const sMSController = new SMSController(sdkClient);
export const sessionManagementController = new SessionManagementController(sdkClient);
export const connectivityCallbacksController = new ConnectivityCallbacksController(sdkClient);
export const accountRequestsController = new AccountRequestsController(sdkClient);
export const servicePlansController = new ServicePlansController(sdkClient);
export const deviceDiagnosticsController = new DeviceDiagnosticsController(sdkClient);
export const deviceMonitoringController = new DeviceMonitoringController(sdkClient);
export const deviceProfileManagementController = new DeviceProfileManagementController(sdkClient);
export const eUICCDeviceProfileManagementController = new EUICCDeviceProfileManagementController(sdkClient);
export const oAuthAuthorizationController = new OAuthAuthorizationController(sdkClient);

