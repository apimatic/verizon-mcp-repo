/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  Account,
  AccountLeadsResult,
  AccountsController,
  AccountStatesAndServices,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('AccountsController', () => {
  let controller : AccountsController;

  beforeAll(() => {
    controller = new AccountsController(testClient);
  });

  it('should Test GetAccountInformation', async () => {
    const aname = 'Chintan_CPNStaticBulk';

    const response = await makeApiCall(
      () => controller.getAccountInformation(aname)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: Account = {
      accountName: 'Chintan_CPNStaticBulk',
      accountNumber: '1234567890-77777',
      organizationName: 'ChintanCPNBulk',
      isProvisioningAllowed: true,
      carriers: [
        'Verizon Wireless'
      ],
      features: [
        'Static IP',
        'Dynamic IP',
        'Customer PN'
      ],
      iPPools: [
        {
          poolName: 'ACMESTATIC001',
          poolType: 'Static IP',
          isDefaultPool: true,
        },
        {
          poolName: 'ACMEDYNAMIC001',
          poolType: 'Dynamic IP',
          isDefaultPool: false,
        }
      ],
      servicePlans: [
        {
          carrierServicePlanCode: '',
          code: '92876',
          extendedAttributes: [],
          name: '',
          sizeKb: BigInt(1),
        },
        {
          carrierServicePlanCode: '',
          code: '92876',
          extendedAttributes: [],
          name: '',
          sizeKb: BigInt(1),
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListAccountStatesAndServices', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.listAccountStatesAndServices(aname)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: AccountStatesAndServices = {
      engagement: [
        {
          engagementId: '1234',
          chargingGroup: 'Engagement1234',
          services: [
            {
              name: 'Svc1',
              description: 'Usage Segmentation - Main Line.',
              states: [
                {
                  name: 'Svc1 Activate',
                  workflowSequenceNumber: 1,
                  servicePlans: [
                    '4523aef7250f67205fd5',
                    '4d4090c0f2d48814c94d'
                  ],
                },
                {
                  name: 'Svc1 No Telematics',
                  workflowSequenceNumber: 3,
                  servicePlans: [
                    '4523aef7250f67205fd5',
                    '4d4090c0f2d48814c94d'
                  ],
                },
                {
                  name: 'Svc1 Deactivate',
                  workflowSequenceNumber: 2,
                  servicePlans: [
                    '4523aef7250f67205fd5',
                    '4d4090c0f2d48814c94d'
                  ],
                }
              ],
            },
            {
              name: 'WIFI',
              description: 'Usage Segmentation - WiFi.',
              states: [
                {
                  name: 'WIFI Redirect',
                  workflowSequenceNumber: 2,
                  servicePlans: [
                    '4d4090c0f2d48814c94d'
                  ],
                },
                {
                  name: 'WIFI Trial',
                  workflowSequenceNumber: 4,
                  servicePlans: [
                    '4d4090c0f2d48814c94d'
                  ],
                },
                {
                  name: 'WIFI Goodwill',
                  workflowSequenceNumber: 6,
                  servicePlans: [
                    '4d4090c0f2d48814c94d'
                  ],
                },
                {
                  name: 'WIFI Disable',
                  workflowSequenceNumber: 3,
                  servicePlans: [
                    '4d4090c0f2d48814c94d'
                  ],
                }
              ],
            }
          ],
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListAccountLeads', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.listAccountLeads(aname, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: AccountLeadsResult = {
      hasMoreData: false,
      leads: [
        {
          address: {
            addressLine1: '1600 Pennsylvania Avenue',
            city: 'Washington',
            state: 'DC',
            zip: '20500',
            country: 'USA',
            addressLine2: '',
          },
          leadId: 'L-10001',
          leadState: 'Qualified',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListAccountLeads1', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.listAccountLeads(aname, undefined)
    );

    expect(response.statusCode).toBe(202);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: AccountLeadsResult = {
      hasMoreData: false,
      leads: [
        {
          address: {
            addressLine1: '1600 Pennsylvania Avenue',
            city: 'Washington',
            state: 'DC',
            zip: '20500',
            country: 'USA',
            addressLine2: '',
          },
          leadId: 'L-10001',
          leadState: 'Qualified',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
