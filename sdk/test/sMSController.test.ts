/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  ConnectivityManagementSuccessResult,
  DeviceManagementResult,
  SMSController,
  SMSMessagesQueryResult,
  SMSSendRequest,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('SMSController', () => {
  let controller : SMSController;

  beforeAll(() => {
    controller = new SMSController(testClient);
  });

  it('should Test SendSMSToDevice', async () => {
    const body: SMSSendRequest = {
      accountName: '0000123456-00001',
      smsMessage: 'the body or text of the message itself',
      customFields: [
        {
          key: 'CustomField1',
          value: 'value of the field',
        }
      ],
      dataEncoding: 'optional 7 or 8-bit encoding',
      deviceIds: [
        {
          id: '20-digit ICCID',
          kind: 'iccid',
        }
      ],
      timeToLive: 'a000000010000000R',
    };

    const response = await makeApiCall(
      () => controller.sendSMSToDevice(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesSMSMessages', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.listDevicesSMSMessages(aname, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: SMSMessagesQueryResult = {
      hasMoreData: false,
      messages: [
        {
          deviceIds: [
            {
              id: '09623489171',
              kind: 'esn',
            }
          ],
          message: 'testmessage1',
          timestamp: '2016-01-01T12:29:49-08:00',
        },
        {
          deviceIds: [
            {
              id: '09623489171',
              kind: 'esn',
            }
          ],
          message: 'testmessage2',
          timestamp: '2016-01-01T12:31:02-08:00',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesSMSMessages1', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.listDevicesSMSMessages(aname, undefined)
    );

    expect(response.statusCode).toBe(202);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: SMSMessagesQueryResult = {
      hasMoreData: false,
      messages: [
        {
          deviceIds: [
            {
              id: '09623489171',
              kind: 'esn',
            }
          ],
          message: 'testmessage1',
          timestamp: '2016-01-01T12:29:49-08:00',
        },
        {
          deviceIds: [
            {
              id: '09623489171',
              kind: 'esn',
            }
          ],
          message: 'testmessage2',
          timestamp: '2016-01-01T12:31:02-08:00',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test StartQueuedSMSDelivery', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.startQueuedSMSDelivery(aname)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ConnectivityManagementSuccessResult = {
      success: true,
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
