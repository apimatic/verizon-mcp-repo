/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  CallbackActionResult,
  ConnectivityCallbacksController,
  ConnectivityManagementCallback,
  RegisterCallbackRequest,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('ConnectivityCallbacksController', () => {
  let controller : ConnectivityCallbacksController;

  beforeAll(() => {
    controller = new ConnectivityCallbacksController(testClient);
  });

  it('should Test ListRegisteredCallbacks', async () => {
    const aname = '0252012345-00001';

    const response = await makeApiCall(
      () => controller.listRegisteredCallbacks(aname)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ConnectivityManagementCallback[] = [
      {
        accountName: '0252012345-00001',
        serviceName: 'CarrierService',
        url: 'http://10.120.102.147:50569/CallbackListener/Carrier.asmx',
      },
      {
        accountName: '0252012345-00001',
        password: 'drowssap',
        serviceName: 'DeviceUsage',
        url: 'http://10.120.102.147:50569/CallbackListener/Usage.asmx',
        username: 'zaffod',
      }
    ];

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test RegisterCallback', async () => {
    const aname = 'TestAccount-2';

    const body: RegisterCallbackRequest = {
      name: 'CarrierService',
      url: 'https://mock.thingspace.verizon.com/webhook',
    };

    const response = await makeApiCall(
      () => controller.registerCallback(aname, body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: CallbackActionResult = {
      accountName: '122333444-00002',
      serviceName: 'CarrierService',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test DeregisterCallback', async () => {
    const aname = '1223334444-00001';

    const sname = 'CarrierService';

    const response = await makeApiCall(
      () => controller.deregisterCallback(aname, sname)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: CallbackActionResult = {
      accountName: '1223334444-00001',
      serviceName: 'CarrierService',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
