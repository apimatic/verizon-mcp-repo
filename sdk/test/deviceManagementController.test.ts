/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  AccountDeviceListRequest,
  AccountDeviceListResult,
  AddDevicesRequest,
  AddDevicesResult,
  BilledusageListRequest,
  CarrierActionsRequest,
  CarrierActivateRequest,
  CarrierDeactivateRequest,
  CheckOrderStatusRequest,
  ConnectionHistoryResult,
  ContactInfoUpdateRequest,
  CustomFieldsUpdateRequest,
  DeleteDevicesRequest,
  DeleteDevicesResult,
  DeviceActivationRequest,
  DeviceAggregateUsageListRequest,
  DeviceConnectionListRequest,
  DeviceCostCenterRequest,
  DeviceExtendedDiagnosticsRequest,
  DeviceExtendedDiagnosticsResult,
  DeviceManagementController,
  DeviceManagementResult,
  DeviceMismatchListRequest,
  DeviceMismatchListResult,
  DevicePrlListRequest,
  DeviceProvisioningHistoryListRequest,
  DeviceProvisioningHistoryListResult,
  DeviceSuspensionStatusRequest,
  DeviceUploadRequest,
  DeviceUsageListRequest,
  DeviceUsageListResult,
  MoveDeviceRequest,
  ServicePlanUpdateRequest,
  UploadsActivatesDeviceRequest,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('DeviceManagementController', () => {
  let controller : DeviceManagementController;

  beforeAll(() => {
    controller = new DeviceManagementController(testClient);
  });

  it('should Test ActivateServiceForDevices', async () => {
    const body: CarrierActivateRequest = {
      devices: [
        {
          deviceIds: [
            {
              id: '990013907835573',
              kind: 'imei',
            },
            {
              id: '89141390780800784259',
              kind: 'iccid',
            }
          ],
          ipAddress: '1.2.3.456',
        },
        {
          deviceIds: [
            {
              id: '990013907884259',
              kind: 'imei',
            },
            {
              id: '89141390780800735573',
              kind: 'iccid',
            }
          ],
          ipAddress: '1.2.3.456',
        }
      ],
      servicePlan: 'the service plan name',
      mdnZipCode: '98801',
      accountName: '0868924207-00001',
      customFields: [
        {
          key: 'CustomField2',
          value: 'SuperVend',
        }
      ],
      groupName: '4G West',
      primaryPlaceOfUse: {
        address: {
          addressLine1: '1600 Pennsylvania Ave NW',
          city: 'Washington',
          state: 'DC',
          zip: '20500',
          country: 'USA',
        },
        customerName: {
          firstName: 'Zaffod',
          lastName: 'Beeblebrox',
          title: 'President',
        },
      },
    };

    const response = await makeApiCall(
      () => controller.activateServiceForDevices(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test AddDevices', async () => {
    const body: AddDevicesRequest = {
      state: 'preactive',
      devicesToAdd: [
        {
          deviceIds: [
            {
              id: '990013907835573',
              kind: 'imei',
            },
            {
              id: '89141390780800784259',
              kind: 'iccid',
            }
          ],
        },
        {
          deviceIds: [
            {
              id: '990013907884259',
              kind: 'imei',
            },
            {
              id: '89141390780800735573',
              kind: 'iccid',
            }
          ],
        }
      ],
      accountName: '0868924207-00001',
      customFields: [
        {
          key: 'CustomField2',
          value: 'SuperVend',
        }
      ],
      groupName: 'West Region',
    };

    const response = await makeApiCall(
      () => controller.addDevices(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: AddDevicesResult[] = [
      {
        deviceIds: [
          {
            id: '89148000000800784259',
            kind: 'iccid',
          }
        ],
        response: 'Success',
      }
    ];

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test UpdateDevicesContactInformation', async () => {
    const body: ContactInfoUpdateRequest = {
      primaryPlaceOfUse: {
        address: {
          addressLine1: '9868 Scranton Rd',
          city: 'San Diego',
          state: 'CA',
          zip: '92121',
          country: 'USA',
          addressLine2: 'Suite A',
          zip4: '0001',
          phone: '1234567890',
          phoneType: 'H',
          emailAddress: 'zaffod@theinternet.com',
        },
        customerName: {
          firstName: 'Zaffod',
          lastName: 'Beeblebrox',
          title: 'President',
          middleName: 'P',
          suffix: 'I',
        },
      },
      accountName: '0000123456-00001',
      devices: [
        {
          deviceIds: [
            {
              id: '19110173057',
              kind: 'ESN',
            },
            {
              id: '19110173057',
              kind: 'ESN',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.updateDevicesContactInformation(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '24da9f9a-d110-4a54-86b4-93fb76aab83c',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test UpdateDevicesCustomFields', async () => {
    const body: CustomFieldsUpdateRequest = {
      customFieldsToUpdate: [
        {
          key: 'CustomField1',
          value: 'West Region',
        },
        {
          key: 'CustomField2',
          value: 'Distribution',
        }
      ],
      devices: [
        {
          deviceIds: [
            {
              id: '89148000000800139708',
              kind: 'iccid',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.updateDevicesCustomFields(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test DeactivateServiceForDevices', async () => {
    const body: CarrierDeactivateRequest = {
      accountName: '0000123456-00001',
      devices: [
        {
          deviceIds: [
            {
              id: '20-digit ICCID',
              kind: 'iccid',
            }
          ],
        }
      ],
      reasonCode: 'FF',
      etfWaiver: true,
      deleteAfterDeactivation: true,
    };

    const response = await makeApiCall(
      () => controller.deactivateServiceForDevices(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test DeleteDeactivatedDevices', async () => {
    const body: DeleteDevicesRequest = {
      devicesToDelete: [
        {
          deviceIds: [
            {
              id: '09005470263',
              kind: 'esn',
            }
          ],
        },
        {
          deviceIds: [
            {
              id: '85000022411113460014',
              kind: 'iccid',
            }
          ],
        },
        {
          deviceIds: [
            {
              id: '85000022412313460016',
              kind: 'iccid',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.deleteDeactivatedDevices(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeleteDevicesResult[] = [
      {
        deviceIds: {
          id: '09005470263',
          kind: 'esn',
        },
        status: 'Success',
      },
      {
        deviceIds: {
          id: '85000022411113460014',
          kind: 'iccid',
        },
        status: 'Success',
      },
      {
        deviceIds: [
          {
            id: '85000022412313460016',
            kind: 'iccid',
          },
          {
            id: '09005470263',
            kind: 'esn',
          }
        ],
        status: 'Failed',
        message: 'The device is not in deactive state.',
      }
    ];

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesInformation', async () => {
    const body: AccountDeviceListRequest = {
      deviceId: {
        id: '20-digit ICCID',
        kind: 'iccid',
      },
    };

    const response = await makeApiCall(
      () => controller.listDevicesInformation(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: AccountDeviceListResult = {
      devices: [
        {
          accountName: '0000123456-00001',
          billingCycleEndDate: '2020-05-09T20:00:00-04:00',
          carrierInformations: [
            {
              carrierName: 'Verizon Wireless',
              servicePlan: 'm2m4G',
              state: 'active',
            }
          ],
          connected: false,
          createdAt: '2019-08-07T10:42:15-04:00',
          deviceIds: [
            {
              id: '10-digit MDN',
              kind: 'mdn',
            },
            {
              id: '15-digit IMEI',
              kind: 'imei',
            }
          ],
          groupNames: [
            'southwest'
          ],
          ipAddress: '0.0.0.0',
          lastActivationBy: 'Joe Q Public',
          lastActivationDate: '2019-08-07T10:42:34-04:00',
          lastConnectionDate: '2020-03-12T04:23:37-04:00',
        }
      ],
      hasMoreData: false,
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesInformation1', async () => {
    const body: AccountDeviceListRequest = {
      deviceId: {
        id: '20-digit ICCID',
        kind: 'iccid',
      },
    };

    const response = await makeApiCall(
      () => controller.listDevicesInformation(body)
    );

    expect(response.statusCode).toBe(202);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: AccountDeviceListResult = {
      devices: [
        {
          accountName: '0000123456-00001',
          billingCycleEndDate: '2020-05-09T20:00:00-04:00',
          carrierInformations: [
            {
              carrierName: 'Verizon Wireless',
              servicePlan: 'm2m4G',
              state: 'active',
            }
          ],
          connected: false,
          createdAt: '2019-08-07T10:42:15-04:00',
          deviceIds: [
            {
              id: '10-digit MDN',
              kind: 'mdn',
            },
            {
              id: '15-digit IMEI',
              kind: 'imei',
            }
          ],
          groupNames: [
            'southwest'
          ],
          ipAddress: '0.0.0.0',
          lastActivationBy: 'Joe Q Public',
          lastActivationDate: '2019-08-07T10:42:34-04:00',
          lastConnectionDate: '2020-03-12T04:23:37-04:00',
        }
      ],
      hasMoreData: false,
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesWithImeiIccidMismatch', async () => {
    const body: DeviceMismatchListRequest = {
      filter: {
        earliest: '2020-05-01T15:00:00-08:00Z',
        latest: '2020-07-30T15:00:00-08:00Z',
      },
      devices: [
        {
          deviceIds: [
            {
              id: '8914800000080078',
              kind: 'ICCID',
            },
            {
              id: '5096300587',
              kind: 'MDN',
            }
          ],
        }
      ],
      accountName: '0342077109-00001',
    };

    const response = await makeApiCall(
      () => controller.listDevicesWithImeiIccidMismatch(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceMismatchListResult = {
      devices: [
        {
          accountName: '0212398765-00001',
          mdn: '5096300587',
          activationDate: '2011-01-21T10:55:27-08:00',
          iccid: '89148000000800784259',
          preImei: '990003420535573',
          postImei: '987603420573553',
          simOtaDate: '2017-12-01T16:00:00-08:00',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test MoveDevicesWithinAccountsOfProfile', async () => {
    const body: MoveDeviceRequest = {
      accountName: '0212345678-00001',
      devices: [
        {
          deviceIds: [
            {
              id: '19110173057',
              kind: 'ESN',
            }
          ],
        }
      ],
      servicePlan: 'M2M5GB',
    };

    const response = await makeApiCall(
      () => controller.moveDevicesWithinAccountsOfProfile(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: 'ec682a8b-e288-4806-934d-24e7a59ed889',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ChangeDevicesServicePlan', async () => {
    const body: ServicePlanUpdateRequest = {
      servicePlan: 'Tablet5GB',
      devices: [
        {
          deviceIds: [
            {
              id: 'A100003685E561',
              kind: 'meid',
            }
          ],
        }
      ],
      carrierIpPoolName: 'IPPool',
    };

    const response = await makeApiCall(
      () => controller.changeDevicesServicePlan(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: 'c8de7c1d-59b9-4cf3-b969-db76cb2ce509',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test SuspendServiceForDevices', async () => {
    const body: CarrierActionsRequest = {
      devices: [
        {
          deviceIds: [
            {
              id: '89148000000800139708',
              kind: 'iccid',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.suspendServiceForDevices(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test RestoreServiceForSuspendedDevices', async () => {
    const body: CarrierActionsRequest = {
      devices: [
        {
          deviceIds: [
            {
              id: '89148000000800139708',
              kind: 'iccid',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.restoreServiceForSuspendedDevices(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test CheckDevicesAvailabilityForActivation', async () => {
    const body: DeviceActivationRequest = {
      accountName: '0212345678-00001',
      devices: [
        {
          deviceIds: [
            {
              id: 'A100008385E561',
              kind: 'meid',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.checkDevicesAvailabilityForActivation(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test RetrieveDeviceConnectionHistory', async () => {
    const body: DeviceConnectionListRequest = {
      deviceId: {
        id: '89141390780800784259',
        kind: 'iccid',
      },
      earliest: '2015-09-16T00:00:01Z',
      latest: '2010-09-18T00:00:01Z',
    };

    const response = await makeApiCall(
      () => controller.retrieveDeviceConnectionHistory(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ConnectionHistoryResult = {
      connectionHistory: [
        {
          connectionEventAttributes: [
            {
              key: 'BytesUsed',
              value: '0',
            },
            {
              key: 'Event',
              value: 'Start',
            }
          ],
          extendedAttributes: [],
          occurredAt: '2015-12-17T14:12:36-05:00',
        },
        {
          connectionEventAttributes: [
            {
              key: 'BytesUsed',
              value: '419863234',
            },
            {
              key: 'Event',
              value: 'Stop',
            },
            {
              key: 'Msisdn',
              value: '15086303371',
            }
          ],
          extendedAttributes: [],
          occurredAt: '2015-12-19T01:20:00-05:00',
        }
      ],
      hasMoreData: false,
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test RetrieveDeviceConnectionHistory1', async () => {
    const body: DeviceConnectionListRequest = {
      deviceId: {
        id: '89141390780800784259',
        kind: 'iccid',
      },
      earliest: '2015-09-16T00:00:01Z',
      latest: '2010-09-18T00:00:01Z',
    };

    const response = await makeApiCall(
      () => controller.retrieveDeviceConnectionHistory(body)
    );

    expect(response.statusCode).toBe(202);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ConnectionHistoryResult = {
      connectionHistory: [
        {
          connectionEventAttributes: [
            {
              key: 'BytesUsed',
              value: '0',
            },
            {
              key: 'Event',
              value: 'Start',
            }
          ],
          extendedAttributes: [],
          occurredAt: '2015-12-17T14:12:36-05:00',
        },
        {
          connectionEventAttributes: [
            {
              key: 'BytesUsed',
              value: '419863234',
            },
            {
              key: 'Event',
              value: 'Stop',
            },
            {
              key: 'Msisdn',
              value: '15086303371',
            }
          ],
          extendedAttributes: [],
          occurredAt: '2015-12-19T01:20:00-05:00',
        }
      ],
      hasMoreData: false,
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test UpdateDevicesCostCenterCode', async () => {
    const body: DeviceCostCenterRequest = {
      costCenter: 'cc12345',
      devices: [
        {
          deviceIds: [
            {
              id: '89148000000800139708',
              kind: 'iccid',
            }
          ],
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.updateDevicesCostCenterCode(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test GetDeviceExtendedDiagnosticInformation', async () => {
    const body: DeviceExtendedDiagnosticsRequest = {
      accountName: '0000123456-00001',
      deviceList: [
        {
          id: '10-digit MDN',
          kind: 'mdn',
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.getDeviceExtendedDiagnosticInformation(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceExtendedDiagnosticsResult = {
      categories: [
        {
          categoryName: 'DeviceIdentifier',
          extendedAttributes: [
            {
              key: 'ICCID',
              value: '20-digit ICCID',
            },
            {
              key: 'IMEI',
              value: '15-digit IMEI',
            },
            {
              key: 'IMSI',
              value: '15-digit IMSI',
            },
            {
              key: 'MDN',
              value: '10-digit phone number',
            },
            {
              key: 'MIN',
              value: '10-digit phone number',
            },
            {
              key: 'MSISDN',
              value: '1+ 10-digit phone number',
            }
          ],
        },
        {
          categoryName: 'DeviceAttributes',
          extendedAttributes: [
            {
              key: 'AccountName',
              value: '0000123456-00001',
            },
            {
              key: 'GroupName',
              value: 'Default: 0000123456-00001',
            },
            {
              key: 'DeviceSku',
              value: 'VZW080000100112',
            },
            {
              key: 'CustomFields1',
              value: '5G SA FWA site',
            },
            {
              key: 'ServicePlanType',
              value: 'Public Dynamic',
            },
            {
              key: 'FeatureCodes',
              value: '84777,86112',
            },
            {
              key: 'FeatureNames',
              value: '84777,86112',
            },
            {
              key: 'FeatureTypes',
              value: '4G PUBLIC DYNAM IP DSS STREAM,5G IPV/IPV6 IP',
            },
            {
              key: 'BundleSku',
              value: 'TSS-IOT-INTELLIGENCE-CUSTOM',
            },
            {
              key: 'RatePlanCode',
              value: '5GBI100MBPS',
            },
            {
              key: 'DeviceMake',
              value: 'ODI',
            },
            {
              key: 'DeviceModel',
              value: 'DIGI - EX50-WXS6-GLB',
            },
            {
              key: 'ModemGeneration',
              value: '5G',
            },
            {
              key: '4GDeviceDetectionDate',
              value: '2024-09-25T22:18:07Z',
            },
            {
              key: 'Services',
              value: 'null',
            },
            {
              key: 'ModemType',
              value: '5GE',
            },
            {
              key: 'DiagnosticsEligibility',
              value: 'StreamEligible',
            },
            {
              key: 'DiagnosticsSKUName',
              value: 'TSS-IOT-INTLG-CUSTOM-DIAG-LWM2M',
            },
            {
              key: 'AvailableNetworks',
              value: '6',
            },
            {
              key: 'ModemCategory',
              value: 'IoT Module',
            }
          ],
        },
        {
          categoryName: 'Provisioning',
          extendedAttributes: [
            {
              key: 'LastActivationBy',
              value: 'Verizon, User',
            },
            {
              key: 'LastActivationDate',
              value: '2024-09-25T00:10:24Z',
            },
            {
              key: 'CreatedAt',
              value: '2024-09-24T20:56:12Z',
            },
            {
              key: 'DeviceState',
              value: 'active',
            },
            {
              key: 'LastDeactivationDate',
              value: '2024-09-25T00:05:21Z',
            }
          ],
        },
        {
          categoryName: 'Connectivity',
          extendedAttributes: [
            {
              key: 'Connected',
              value: 'true',
            },
            {
              key: 'LastConnectionDate',
              value: '2025-03-14T13:12:01.000Z',
            },
            {
              key: 'IPAddress',
              value: '10.0.0.0',
            },
            {
              key: 'LastDisconnectDate',
              value: '2025-03-14T08:34:43.000Z',
            },
            {
              key: 'RoamingStatus',
              value: 'false',
            },
            {
              key: 'RomaingLastModifiedDate',
              value: '2025-03-14T13:12:01.000Z',
            },
            {
              key: 'RequiredAPN',
              value: 'The Access point name',
            }
          ],
        },
        {
          categoryName: 'Billing',
          extendedAttributes: [
            {
              key: 'BillingCycleStartDate',
              value: '2024-09-25T12:00:00Z',
            },
            {
              key: 'BillingCycleEndDate',
              value: '2024-09-25T12:00:00Z',
            },
            {
              key: 'DefaultRatePlan',
              value: '0',
            }
          ],
        },
        {
          categoryName: 'Usage',
          extendedAttributes: [
            {
              key: 'CurrentRatedUsageRecordDate',
              value: '2024-09-25T00:00:00Z',
            },
            {
              key: 'CurrentBillCycleDataRatedUsage',
              value: '0',
            },
            {
              key: 'CurrentBillCycleRatedSMSUsage',
              value: '0',
            },
            {
              key: 'PromoSmsUsage',
              value: '0',
            },
            {
              key: 'PromoSmsUsagePercent',
              value: '0',
            },
            {
              key: 'PromoDataUsage',
              value: '0',
            },
            {
              key: 'PromoDataUsagePercent',
              value: '0',
            },
            {
              key: 'AaaPromoDataUsage',
              value: '0',
            },
            {
              key: 'RtrPromoDataUsage',
              value: '0',
            },
            {
              key: 'InternationalRoamingUsage',
              value: '0',
            }
          ],
        },
        {
          categoryName: 'Location',
          extendedAttributes: [
            {
              key: 'LocationSkuName',
              value: 'TSS-IOT-INTLG-CUSTOM-LOC-COARSE',
            },
            {
              key: 'LastLocationUpdate',
              value: '2024-06-17T16:23:14Z',
            },
            {
              key: 'Latitude',
              value: '33.122153',
            },
            {
              key: 'Longitude',
              value: '-96.641825',
            },
            {
              key: 'LastLocationAttemptDate',
              value: '2024-09-25T16:23:14Z',
            },
            {
              key: 'LastLocationStatus',
              value: '122',
            }
          ],
        },
        {
          categoryName: 'FOTA',
          extendedAttributes: [
            {
              key: 'FotaCurrentFirmwareVersion',
              value: 'SWIX55C_03.09.11.00',
            },
            {
              key: 'FotaSku',
              value: 'TSS-IOT-INTLG-CUSTOM-SWMT',
            },
            {
              key: 'FotaMake',
              value: 'Sierra Wireless',
            },
            {
              key: 'FotaModel',
              value: 'EM9191',
            },
            {
              key: 'FotaProtocol',
              value: 'LWM2M',
            }
          ],
        },
        {
          categoryName: 'PrimaryPlaceOfUse',
          extendedAttributes: [
            {
              key: 'CustomerFirstName',
              value: 'first name',
            },
            {
              key: 'CustomerLastName',
              value: 'last name',
            },
            {
              key: 'CustomerAddressLine1',
              value: 'street number and name',
            },
            {
              key: 'CustomerAddressCity',
              value: 'PLANO',
            },
            {
              key: 'CustomerAddressState',
              value: 'TX',
            },
            {
              key: 'CustomerAddressZipCode',
              value: '75075',
            },
            {
              key: 'CustomerCountry',
              value: 'USA',
            },
            {
              key: 'CustomerPpuLatitude',
              value: 'latitude in decimal degrees',
            },
            {
              key: 'CustomerPpuLongitude',
              value: 'longitude in decimal degrees',
            }
          ],
        },
        {
          categoryName: 'SIMSECURE',
        },
        {
          categoryName: 'RTR',
          extendedAttributes: [
            {
              key: 'RTRUnRatedDataUsage',
              value: '0',
            }
          ],
        },
        {
          categoryName: 'PMEC',
          extendedAttributes: [
            {
              key: 'IsPmec',
              value: 'false',
            }
          ],
        },
        {
          categoryName: 'RfAttributes',
          extendedAttributes: [
            {
              key: 'CellID',
              value: 'cellular ID',
            },
            {
              key: 'CellIDUpdatedDate',
              value: '2024-09-25T21:35:50Z',
            },
            {
              key: 'CellIDStreamStatus',
              value: 'ObserveInprogress',
            },
            {
              key: 'CellIDIntervalInSeconds',
              value: '15',
            },
            {
              key: 'CellIDDurationInSeconds',
              value: '900',
            },
            {
              key: 'NetworkBearer',
              value: '6',
            },
            {
              key: 'NetworkBearerUpdateDate',
              value: '2024-09-25T21:35:50Z',
            },
            {
              key: 'NetworkBearerStreamStatus',
              value: 'ObserveInprogress',
            },
            {
              key: 'NetworkBearerIntervalInSeconds',
              value: '15',
            },
            {
              key: 'NetworkBearerDurationInSeconds',
              value: '900',
            },
            {
              key: 'RadioSignalStrength',
              value: '-59',
            },
            {
              key: 'RadioSignalStrengthUpdatedDate',
              value: '2024-09-25T21:35:50Z',
            },
            {
              key: 'RadioSignalStrengthStreamStatus',
              value: 'ObserveDurationExpired',
            },
            {
              key: 'RadioSignalStrengthIntervalInSeconds',
              value: '15',
            },
            {
              key: 'RadioSignalStrengthDurationInSeconds',
              value: '3600',
            },
            {
              key: 'LinkQuality',
              value: '-11',
            },
            {
              key: 'LinkQualityUpdatedDate',
              value: '2024-09-25T21:35:50Z',
            },
            {
              key: 'LinkQualityStreamStatus',
              value: 'ObserveInprogress',
            },
            {
              key: 'LinkQualityIntervalInSeconds',
              value: '15',
            },
            {
              key: 'LinkQualityDurationInSeconds',
              value: '3600',
            }
          ],
        },
        {
          categoryName: 'Battery',
          extendedAttributes: [
            {
              key: 'BatteryLevel',
              value: '0',
            }
          ],
        },
        {
          categoryName: 'Restart',
          extendedAttributes: [
            {
              key: 'DeviceRebootStatus',
              value: 'REBOOT_QUEUED',
            },
            {
              key: 'DeviceRebootStatusDate',
              value: '2024-05-07T14:21:59Z',
            },
            {
              key: 'DeviceRebootStatusErrorCode',
              value: 'DEVICE_UNREACHABLE',
            },
            {
              key: 'DeviceRebootStatusErrorDescription',
              value: 'Device not reachable, request will send to device once it become available',
            }
          ],
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesProvisioningHistory', async () => {
    const body: DeviceProvisioningHistoryListRequest = {
      deviceId: {
        id: '89141390780800784259',
        kind: 'iccid',
      },
      earliest: '2015-09-16T00:00:01Z',
      latest: '2015-09-18T00:00:01Z',
    };

    const response = await makeApiCall(
      () => controller.listDevicesProvisioningHistory(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceProvisioningHistoryListResult[] = [
      {
        hasMoreData: false,
        provisioningHistory: [
          {
            occurredAt: '2015-12-17T13:56:13-05:00',
            status: 'Success',
            eventBy: 'Harry Potter',
            eventType: 'Activation Confirmed',
            mdn: '',
            msisdn: '15086303371',
            servicePlan: 'Tablet5GB',
            extendedAttributes: [],
          }
        ],
      }
    ];

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesProvisioningHistory1', async () => {
    const body: DeviceProvisioningHistoryListRequest = {
      deviceId: {
        id: '89141390780800784259',
        kind: 'iccid',
      },
      earliest: '2015-09-16T00:00:01Z',
      latest: '2015-09-18T00:00:01Z',
    };

    const response = await makeApiCall(
      () => controller.listDevicesProvisioningHistory(body)
    );

    expect(response.statusCode).toBe(202);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceProvisioningHistoryListResult[] = [
      {
        hasMoreData: false,
        provisioningHistory: [
          {
            occurredAt: '2015-12-17T13:56:13-05:00',
            status: 'Success',
            eventBy: 'Harry Potter',
            eventType: 'Activation Confirmed',
            mdn: '',
            msisdn: '15086303371',
            servicePlan: 'Tablet5GB',
            extendedAttributes: [],
          }
        ],
      }
    ];

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListCurrentDevicesPRLVersion', async () => {
    const body: DevicePrlListRequest = {
      deviceIds: [
        {
          id: 'A10085E5003861',
          kind: 'meid',
        },
        {
          id: 'A10085E5003186',
          kind: 'meid',
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.listCurrentDevicesPRLVersion(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test GetDeviceServiceSuspensionStatus', async () => {
    const body: DeviceSuspensionStatusRequest = {
      deviceIds: [
        {
          id: 'A10085E5003861',
          kind: 'meid',
        },
        {
          id: 'A10085E5003186',
          kind: 'meid',
        }
      ],
    };

    const response = await makeApiCall(
      () => controller.getDeviceServiceSuspensionStatus(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '904dcdc6-a590-45e4-ac76-403306f6d883',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesUsageHistory', async () => {
    const body: DeviceUsageListRequest = {
      earliest: '2018-03-20T00:00:01Z',
      latest: '2020-12-31T00:00:01Z',
      deviceId: {
        id: '50684915885088839315521399821675',
        kind: 'eid',
      },
    };

    const response = await makeApiCall(
      () => controller.listDevicesUsageHistory(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceUsageListResult = {
      hasMoreData: false,
      usageHistory: [
        {
          bytesUsed: BigInt(4096),
          extendedAttributes: [
            {
              key: 'MoSms',
              value: '0',
            }
          ],
          smsUsed: 0,
          source: 'Raw Usage',
          timestamp: '2020-12-01T00:00:00Z',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ListDevicesUsageHistory1', async () => {
    const body: DeviceUsageListRequest = {
      earliest: '2018-03-20T00:00:01Z',
      latest: '2020-12-31T00:00:01Z',
      deviceId: {
        id: '50684915885088839315521399821675',
        kind: 'eid',
      },
    };

    const response = await makeApiCall(
      () => controller.listDevicesUsageHistory(body)
    );

    expect(response.statusCode).toBe(202);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceUsageListResult = {
      hasMoreData: false,
      usageHistory: [
        {
          bytesUsed: BigInt(4096),
          extendedAttributes: [
            {
              key: 'MoSms',
              value: '0',
            }
          ],
          smsUsed: 0,
          source: 'Raw Usage',
          timestamp: '2020-12-01T00:00:00Z',
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test RetrieveAggregateDeviceUsageHistory', async () => {
    const body: DeviceAggregateUsageListRequest = {
      startTime: '2021-08-01T00:00:00-06:00',
      endTime: '2021-08-30T00:00:00-06:00',
      deviceIds: [
        {
          id: '84258000000891490087',
          kind: 'ICCID',
        }
      ],
      accountName: '9992330389-00001',
    };

    const response = await makeApiCall(
      () => controller.retrieveAggregateDeviceUsageHistory(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '1631e200-7398-4609-b1f8-398341229176',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test DeviceUpload', async () => {
    const body: DeviceUploadRequest = {
      accountName: '1223334444-00001',
      devices: [
        {
          deviceIds: [
            {
              id: '15-digit IMEI',
              kind: 'IMEI',
            }
          ],
        },
        {
          deviceIds: [
            {
              id: '15-digit IMEI',
              kind: 'IMEI',
            }
          ],
        },
        {
          deviceIds: [
            {
              id: '15-digit IMEI',
              kind: 'IMEI',
            }
          ],
        }
      ],
      emailAddress: 'bob@mycompany.com',
      deviceSku: 'VZW123456',
      uploadType: 'IMEI',
    };

    const response = await makeApiCall(
      () => controller.deviceUpload(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test BilledUsageInfo', async () => {
    const body: BilledusageListRequest = {
      accountName: '0342077109-00001',
    };

    const response = await makeApiCall(
      () => controller.billedUsageInfo(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: '595f5c44-c31c-4552-8670-020a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test UploadActivateDevice', async () => {
    const body: UploadsActivatesDeviceRequest = {
      accountName: '1223334444-00001',
      emailAddress: 'bob@mycompany.com',
      deviceSku: 'VZW123456',
      uploadType: 'IMEI ICCID Pair',
      servicePlan: '15MBShr',
      mdnZipCode: '92222',
      devices: [
        {
          deviceIds: [
            {
              id: '990013907835573',
              kind: 'imei',
            },
            {
              id: '89141390780800784259',
              kind: 'iccid',
            }
          ],
        }
      ],
      carrierIpPoolName: '',
    };

    const response = await makeApiCall(
      () => controller.uploadActivateDevice(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: 'ec682a8b-e288-4806-934d-24e7a59ed889',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test DeviceUploadStatus', async () => {
    const body: CheckOrderStatusRequest = {
      accountName: '4Gpublicaccount ',
      devices: [
        {
          deviceIds: [
            {
              id: '20112019672551234613',
              kind: 'iccid',
            }
          ],
        }
      ],
      orderRequestId: ' f55fea16-3664-4a32-ae9d-c0cbe3eedf1d ',
    };

    const response = await makeApiCall(
      () => controller.deviceUploadStatus(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: DeviceManagementResult = {
      requestId: 'c7b45cf2-cab1-4e42-82f8-20350f4c4ea3',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
