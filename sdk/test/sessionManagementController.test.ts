/**
 * ThingSpace Connectivity Management APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  LogInRequest,
  LogInResult,
  LogOutRequest,
  SessionManagementController,
  SessionResetPasswordRequest,
  SessionResetPasswordResult,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('SessionManagementController', () => {
  let controller : SessionManagementController;

  beforeAll(() => {
    controller = new SessionManagementController(testClient);
  });

  it('should Test StartConnectivityManagementSession', async () => {
    const body: LogInRequest = {
      username: 'zbeeblebrox',
      password: 'IMgr8',
    };

    const response = await makeApiCall(
      () => controller.startConnectivityManagementSession(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: LogInResult = {
      sessionToken: 'bcce3ea6-fe4f-4952-bacf-eadd80718e83',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test EndConnectivityManagementSession', async () => {
    const response = await makeApiCall(
      () => controller.endConnectivityManagementSession()
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: LogOutRequest = {
      sessionToken: 'bcce3ea6-fe4f-4952-bacf-eadd80718e83',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test ResetConnectivityManagementPassword', async () => {
    const body: SessionResetPasswordRequest = {
      oldPassword: 'grflbk',
    };

    const response = await makeApiCall(
      () => controller.resetConnectivityManagementPassword(body)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: SessionResetPasswordResult = {
      newPassword: 'Wh0a1545a84d',
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });
});
